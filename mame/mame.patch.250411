
diff -urN mame_orig/src/mame/samsung/spc1000.cpp mame/src/mame/samsung/spc1000.cpp
--- mame_orig/src/mame/samsung/spc1000.cpp	2025-04-10 23:47:46.803728082 +0900
+++ mame/src/mame/samsung/spc1000.cpp	2025-04-10 23:49:02.415752800 +0900
@@ -135,6 +135,7 @@
 #include "bus/spc1000/exp.h"
 #include "bus/spc1000/fdd.h"
 #include "bus/spc1000/vdp.h"
+#include "bus/spc1000/neo.h"
 
 #include "softlist_dev.h"
 #include "speaker.h"
diff -urN mame_orig/src/devices/bus/spc1000/neo.cpp mame/src/devices/bus/spc1000/neo.cpp
--- mame_orig/src/devices/bus/spc1000/neo.cpp	1970-01-01 09:00:00.000000000 +0900
+++ mame/src/devices/bus/spc1000/neo.cpp	2025-04-10 23:09:59.453920500 +0900
@@ -0,0 +1,227 @@
+// license:BSD-3-Clause
+// copyright-holders:Miso Kim meeso.kim@gmail.com
+/***************************************************************************
+
+    SPC-1000 neo expansion unit
+
+***************************************************************************/
+
+#include <map>
+#include <regex>
+#include <filesystem>
+#include <string>
+#include <fstream>
+using namespace std;
+
+#include "emu.h"
+#include "neo.h"
+
+/***************************************************************************
+    IMPLEMENTATION
+***************************************************************************/
+
+//-------------------------------------------------
+//  device_add_mconfig
+//-------------------------------------------------
+
+void spc1000_neo_exp_device::device_add_mconfig(machine_config &config)
+{
+}
+
+
+//**************************************************************************
+//  GLOBAL VARIABLES
+//**************************************************************************
+
+DEFINE_DEVICE_TYPE(SPC1000_NEO_EXP, spc1000_neo_exp_device, "spc1000_neo_exp", "SPC1000 NEO expansion")
+
+//**************************************************************************
+//  LIVE DEVICE
+//**************************************************************************
+
+//-------------------------------------------------
+//  spc1000_neo_exp_device - constructor
+//-------------------------------------------------
+
+spc1000_neo_exp_device::spc1000_neo_exp_device(const machine_config &mconfig, const char *tag, device_t *owner, uint32_t clock)
+	: device_t(mconfig, SPC1000_NEO_EXP, tag, owner, clock)
+	, device_spc1000_card_interface(mconfig, *this)
+	, device_image_interface(mconfig, *this)
+{
+	strcpy(m_extension_list, "tap,cas,zip,*");
+    void *hDLL = OpenSPC((char*)SPC_DRIVE, RTLD_LAZY);
+    if (!hDLL)
+    {
+        printf("DLL open error!!\n");
+    }
+    else
+    {
+	    spcreset = (ResetfnPtr)GetSPCFunc(hDLL, (char*)SPCRESET);
+	    spcread = (ReadfnPtr)GetSPCFunc(hDLL, (char*)SPCREAD);
+	    spcwrite = (WritefnPtr)GetSPCFunc(hDLL, (char*)SPCWRITE);
+	    spcinit = (InitfnPtr)GetSPCFunc(hDLL, (char*)SPCINIT);	
+	}
+}
+
+std::vector<std::string_view> Split(const std::string_view str, const char delim = ';')
+{   
+    std::vector<std::string_view> result;
+
+    int indexCommaToLeftOfColumn = 0;
+    int indexCommaToRightOfColumn = -1;
+
+    for (int i=0;i<static_cast<int>(str.size());i++)
+    {
+        if (str[i] == delim)
+        {
+            indexCommaToLeftOfColumn = indexCommaToRightOfColumn;
+            indexCommaToRightOfColumn = i;
+            int index = indexCommaToLeftOfColumn + 1;
+            int length = indexCommaToRightOfColumn - index;
+
+            // Bounds checking can be omitted as logically, this code can never be invoked 
+            // Try it: put a breakpoint here and run the unit tests.
+            /*if (index + length >= static_cast<int>(str.size()))
+            {
+                length--;
+            }               
+            if (length < 0)
+            {
+                length = 0;
+            }*/
+
+            std::string_view column(str.data() + index, length);
+            result.push_back(column);
+        }
+    }
+    const std::string_view finalColumn(str.data() + indexCommaToRightOfColumn + 1, str.size() - indexCommaToRightOfColumn - 1);
+    result.push_back(finalColumn);
+    return result;
+}
+
+std::pair<std::error_condition, std::string> spc1000_neo_exp_device::load(std::string_view path) {
+	std::pair<std::error_condition, std::string> err;
+	for(auto& de : Split(path)) {
+		char *str = new char[string(de).length()+1];
+		strcpy(str, string(de).c_str()); 
+		ifstream f(str);
+		if (f.good())
+			files[size++] = (const char *)str;
+		// printf("%s\n", files[size++]);
+	}	
+	return err;
+}
+
+//-------------------------------------------------
+//  device_start - device-specific startup
+//-------------------------------------------------
+
+void spc1000_neo_exp_device::device_start()
+{
+    // if (!::sbox) {
+	// 	TapeFiles *tape = new TapeFiles();
+	// 	printf("filename:%s\n", filename());
+	// 	if (filename())
+	// 		tape->initialize(filename());
+	// 	else if (size>0) 
+	// 		tape->initialize(files, size);
+	// 	else
+	// 		tape->initialize((const char*)tap_zip, sizeof(tap_zip));
+    //     ::sbox = new SpcBox(tape);
+	// }
+    // sbox=::sbox;
+	// sbox->initialize();
+    char *path = getenv("SPC_PATH");
+    if (spcinit)
+    {
+        if (!path)
+        {
+            path = (char*)".";
+        }
+        spcinit(path);
+
+    }
+}
+
+//-------------------------------------------------
+//  device_reset - device-specific reset
+//-------------------------------------------------
+
+void spc1000_neo_exp_device::device_reset()
+{
+	if (spcreset)
+		spcreset();
+}
+
+/*-------------------------------------------------
+    read
+-------------------------------------------------*/
+uint8_t spc1000_neo_exp_device::read(offs_t offset)
+{
+	if (offset > 0xff || !spcread)
+		return 0xff;
+	return spcread(offset);
+}
+
+//-------------------------------------------------
+//  write
+//-------------------------------------------------
+
+void spc1000_neo_exp_device::write(offs_t offset, uint8_t data)
+{
+	if (offset <= 0xff && spcwrite)
+	{
+		// printf("neo%d:%02x\n", offset, data);
+		spcwrite(offset, data);
+        //sbox->execute();
+	}
+}
+
+
+//-------------------------------------------------
+//  spc1000_neo_exp_device - destructor
+//-------------------------------------------------
+
+spc1000_neo_exp_device::~spc1000_neo_exp_device()
+{
+}
+
+std::pair<std::error_condition, std::string> spc1000_neo_exp_device::call_create(int format_type, util::option_resolution *format_options)
+{
+	// std::pair<std::error_condition, std::string> err;
+	printf("call_create\n");
+	return internal_load(true);
+}
+
+std::pair<std::error_condition, std::string> spc1000_neo_exp_device::call_load()
+{
+	printf("call_load\n");
+	return internal_load(false);
+}
+
+void spc1000_neo_exp_device::call_unload()
+{
+}
+
+const software_list_loader &spc1000_neo_exp_device::get_software_list_loader() const
+{
+	return image_software_list_loader::instance();
+}
+
+
+std::pair<std::error_condition, std::string> spc1000_neo_exp_device::internal_load(bool is_create)
+{
+	std::pair<std::error_condition, std::string> err;
+	return err;
+}
+
+//-------------------------------------------------
+//  display a small tape animation, with the
+//  current position in the tape image
+//-------------------------------------------------
+
+std::string spc1000_neo_exp_device::call_display()
+{
+	std::string result = "/";
+	return result;
+}
diff -urN mame_orig/src/devices/bus/spc1000/neo.h mame/src/devices/bus/spc1000/neo.h
--- mame_orig/src/devices/bus/spc1000/neo.h	1970-01-01 09:00:00.000000000 +0900
+++ mame/src/devices/bus/spc1000/neo.h	2025-04-10 23:07:37.601469000 +0900
@@ -0,0 +1,77 @@
+// license:BSD-3-Clause
+// copyright-holders:Miso Kim meeso.kim@gmail.com
+#ifndef MAME_BUS_SPC1000_NEO_H
+#define MAME_BUS_SPC1000_NEO_H
+
+#pragma once
+
+#include "exp.h"
+#include "spc.h"
+#include "softlist_dev.h"
+
+//**************************************************************************
+//  TYPE DEFINITIONS
+//**************************************************************************
+
+// ======================> spc1000_neo_exp_device
+
+class spc1000_neo_exp_device : public device_t, public device_spc1000_card_interface, public device_image_interface
+{
+public:
+	// construction/destruction
+	spc1000_neo_exp_device(const machine_config &mconfig, const char *tag, device_t *owner, uint32_t clock);
+	virtual ~spc1000_neo_exp_device();
+
+	// image-level overrides
+	virtual std::pair<std::error_condition, std::string>  call_load() override;
+	virtual std::pair<std::error_condition, std::string>  call_create(int format_type, util::option_resolution *format_options) override;
+	virtual void call_unload() override;
+	virtual std::string call_display() override;
+
+	virtual bool is_readable()  const noexcept override { return true; }
+	virtual bool is_writeable() const noexcept override { return true; }
+	virtual bool is_creatable() const noexcept override { return true; }
+	virtual bool is_reset_on_load() const noexcept override { return false; }
+	virtual bool support_command_line_image_creation() const noexcept override { return false; }
+	virtual const char *image_interface() const noexcept override { return "FILE"; }
+	virtual const char *file_extensions() const noexcept override { return m_extension_list; }
+	virtual const char *image_type_name() const noexcept override { return "files"; }
+	virtual const char *image_brief_type_name() const noexcept override { return "file"; }
+
+protected:
+
+	// device-level overrides
+	virtual void device_start() override;
+	virtual void device_reset() override;
+	virtual void device_add_mconfig(machine_config &config) override;
+
+	// image-level overrides
+	virtual const software_list_loader &get_software_list_loader() const override;
+	// std::pair<std::error_condition, std::string> load(std::string_view path) override;
+	std::pair<std::error_condition, std::string> load(std::string_view path) override;
+	//  { printf("load:%s\n", std::string(path).c_str()); return image_init_result::PASS; };
+	std::pair<std::error_condition, std::string> load_internal() { std::pair<std::error_condition, std::string> err; printf("load\n"); return err; };
+	std::pair<std::error_condition, std::string> finish_load() { std::pair<std::error_condition, std::string> err; printf("finish_load\n"); return err; };
+
+	virtual uint8_t read(offs_t offset) override;
+	virtual void write(offs_t offset, uint8_t data) override;
+
+private:
+	char m_extension_list[256];
+	const char *m_interface;
+	std::pair<std::error_condition, std::string> internal_load(bool is_create);
+	const char *files[1024];
+	int size = 0;
+	ReadfnPtr spcread = NULL;
+	WritefnPtr spcwrite = NULL;
+	InitfnPtr spcinit = NULL;
+	ResetfnPtr spcreset = NULL;	
+};
+
+// device type definition
+DECLARE_DEVICE_TYPE(SPC1000_NEO_EXP, spc1000_neo_exp_device)
+
+// device iterator
+typedef device_type_enumerator<spc1000_neo_exp_device> neo_device_enumerator;
+
+#endif // MAME_BUS_SPC1000_NEO_H
diff -urN mame_orig/src/devices/bus/spc1000/spc.cpp mame/src/devices/bus/spc1000/spc.cpp
--- mame_orig/src/devices/bus/spc1000/spc.cpp	1970-01-01 09:00:00.000000000 +0900
+++ mame/src/devices/bus/spc1000/spc.cpp	2025-04-10 22:05:02.186498500 +0900
@@ -0,0 +1,38 @@
+#define DLL_EXPORTS
+#include "spc.h"
+#include <string>
+
+void *OpenSPC(char *pcDllname, int iMode = 2)
+{
+    #if defined(_MSC_VER) || defined(_MINGW32) || defined(__MINGW32__) || defined(WIN32) || defined(WIN64)
+        return (void*)LoadLibrary(std::string(pcDllname).c_str());
+    #elif defined(__GNUC__)
+        return dlopen(std::string(pcDllname).c_str(), iMode);
+    #endif
+}
+void *GetSPCFunc(void *Lib, char *Fnname)
+{ 
+    #if defined(_MSC_VER) || defined(_MINGW32) || defined(__MINGW32__) || defined(WIN32) || defined(WIN64)
+        return (void *)GetProcAddress((HINSTANCE)Lib,Fnname);
+    #elif defined(__GNUC__)
+        return dlsym(Lib,Fnname);
+    #endif
+}
+int CloseSPC(void *hDLL)
+{
+    #if defined(_MSC_VER) || defined(_MINGW32) || defined(__MINGW32__) || defined(WIN32) || defined(WIN64) 
+        return FreeLibrary((HINSTANCE)hDLL);
+    #elif defined(__GNUC__)
+        return dlclose(hDLL);
+    #endif
+}
+char *GetSPCError()
+{
+    #if defined(_MSC_VER) || defined(_MINGW32) || defined(__MINGW32__) || defined(WIN32) || defined(WIN64)
+        static char errors[512];
+        sprintf(errors, "DLL open error: %d", GetLastError());
+        return errors;
+    #elif defined(__GNUC__)
+        return dlerror();
+    #endif
+}
diff -urN mame_orig/src/devices/bus/spc1000/spc.h mame/src/devices/bus/spc1000/spc.h
--- mame_orig/src/devices/bus/spc1000/spc.h	1970-01-01 09:00:00.000000000 +0900
+++ mame/src/devices/bus/spc1000/spc.h	2025-04-10 23:09:29.152675600 +0900
@@ -0,0 +1,39 @@
+#ifndef spc_call_h
+#define spc_call_h
+
+#if defined(_MSC_VER) || defined(_MINGW32) || defined(__MINGW32__) || defined(WIN32) || defined(WIN64)
+#define RTLD_GLOBAL 0x100 /* do not hide entries in this module */
+#define RTLD_LOCAL  0x000 /* hide entries in this module */
+#define RTLD_LAZY   0x000 /* accept unresolved externs */
+#define RTLD_NOW    0x001 /* abort if module has unresolved externs */
+    #include <windows.h>
+    #define SPC_BUS "spcbus.zxw"
+    #define SPC_DRIVE "spcdrive.zxw"        
+#elif defined(__GNUC__)
+#if !defined(RASPPI)
+    #include <dlfcn.h>
+#endif
+    #define SPC_BUS "./spcbus.zxl"    
+    #define SPC_DRIVE "./spcdrive.zxl"
+#else
+    #error define your compiler
+#endif
+
+extern "C" {
+void *OpenSPC(char *pcDllname, int iMode);
+void *GetSPCFunc(void *Lib, char *Fnname);
+int CloseSPC(void *hDLL);
+char *GetSPCError();
+}
+
+#define SPCREAD "spcread"
+#define SPCWRITE "spcwrite"
+#define SPCRESET "spcreset"
+#define SPCINIT "spcinit"
+
+typedef unsigned char (*ReadfnPtr)(unsigned short);
+typedef void (*WritefnPtr)(unsigned short, unsigned char);
+typedef void (*InitfnPtr)(char *);
+typedef void (*ResetfnPtr)(void);
+
+#endif
diff -urN mame_orig/src/emu/diimage.h mame/src/emu/diimage.h
--- mame_orig/src/emu/diimage.h	2025-04-10 23:47:46.293726608 +0900
+++ mame/src/emu/diimage.h	2025-04-10 23:22:43.715162300 +0900
@@ -201,7 +201,7 @@
 	const formatlist_type &formatlist() const { return m_formatlist; }
 
 	// loads an image file
-	std::pair<std::error_condition, std::string> load(std::string_view path);
+	virtual std::pair<std::error_condition, std::string> load(std::string_view path);
 
 	// loads a softlist item by name
 	std::pair<std::error_condition, std::string> load_software(std::string_view software_identifier);
diff -urN mame_orig/scripts/src/bus.lua mame/scripts/src/bus.lua
--- mame_orig/scripts/src/bus.lua	2025-04-10 23:47:45.973725683 +0900
+++ mame/scripts/src/bus.lua	2025-04-10 23:21:36.877906200 +0900
@@ -2562,6 +2562,10 @@
 		MAME_DIR .. "src/devices/bus/spc1000/fdd.h",
 		MAME_DIR .. "src/devices/bus/spc1000/vdp.cpp",
 		MAME_DIR .. "src/devices/bus/spc1000/vdp.h",
+		MAME_DIR .. "src/devices/bus/spc1000/neo.cpp",
+		MAME_DIR .. "src/devices/bus/spc1000/neo.h",
+		MAME_DIR .. "src/devices/bus/spc1000/spc.cpp",
+		MAME_DIR .. "src/devices/bus/spc1000/spc.h",
 	}
 end
 
